import aiogram
from loader import dp,bot,db,chatGPTMessageHandler
from aiogram import types
from utils import dall_e,translator_mode
from keyboards.default import markups
from images import *
from handlers.users.start import bot_start
from handlers.users.help import bot_help
from handlers.users.commands import manual_getter,balance_getter




async def chatgpt_handler(message: types.Message):
        user_id = message.from_user.id
    # try:
        if message.text == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üåÑ' or message.text == '–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ üìö' or message.text == '–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ üîº':
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –í—Å–µ–∑–Ω–∞–π–∫–∞
            await dp.current_state(user=message.from_user.id).set_state(None)
            await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º –í—Å–µ–∑–Ω–∞–π–∫–∞',reply_markup=markups.mainMenu)
            if message.text == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üåÑ':
                await dp.current_state(user=message.from_user.id).set_state('dall_e')
                with open('images/textimage.png','rb') as photo1:
                    await bot.send_photo(message.chat.id,photo=photo1 , caption ='–≠—Ç–æ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∞ –ø–æ—Ç–æ–º –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                                    reply_markup=markups.secondMenu)
                await dall_e_handler(message)
            elif message.text == '–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ üìö':
                with open('images/textimage.png','rb') as photo2:
                    await bot.send_photo(message.chat.id,photo=photo2 , caption ='–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞, –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –µ–≥–æ –Ω–∞ –†—É—Å—Å–∫–∏–π.',
                                    reply_markup=markups.secondMenu)
                await dp.current_state(user=message.from_user.id).set_state('translator')
                await translator_handler(message)
        elif message.text == '/start' or message.text == '/help' or message.text == '/balance' or message.text == '/manual':
            if message.text == '/start':
                await dp.current_state(user=message.from_user.id).reset_state()
                await bot_start(message)
            elif message.text == '/help':
                await bot_help(message)
            elif message.text == '/balance':
                await balance_getter(message)
            elif message.text == '/manual':
                await manual_getter(message)
        else:
            if (db.get_user_balance(user_id=user_id) == "0"):
                await message.answer('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–ª–Ω–∏—Ç–µ –∏—Ö')
            else:
                db.decrease_user_balance(user_id=user_id,amount=1)
                await bot.send_chat_action(message.chat.id, "typing")
                print(message.text)
                response = await chatGPTMessageHandler.get_chatgpt_message(message.text)
                await bot.send_message(chat_id=message.chat.id, text=response, reply_to_message_id=message.message_id)
    # except Exception as e:
    #     await bot_start(message)
        
async def dall_e_handler(message: types.Message):
    user_id = message.from_user.id
    if message.text == '–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ üîº':
        await dp.current_state(user=message.from_user.id).reset_state()
        await message.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',reply_markup=markups.mainMenu)
    else:
        if message.text == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üåÑ':
            pass
        elif message.text == '/start' or message.text == '/help' or message.text == '/balance' or message.text == '/manual':
            if message.text == '/start':
                await dp.current_state(user=message.from_user.id).reset_state()
                await bot_start(message)
            elif message.text == '/help':
                await bot_help(message)
            elif message.text == '/balance':
                await balance_getter(message)
            elif message.text == '/manual':
                await manual_getter(message)
        else:
            try:
                if (db.get_user_balance(user_id=user_id) == "0"):
                    await message.answer('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–ª–Ω–∏—Ç–µ –∏—Ö')
                else:
                    db.decrease_user_balance(user_id=user_id,amount=1)
                    await message.answer( '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å , –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –±–æ—Ç —Å–∫–∏–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
                    await bot.send_chat_action(message.chat.id, "upload_photo")
                    response = await dall_e.generate_image(message.text)
                    await bot.send_chat_action(message.chat.id, aiogram.types.ChatActions.UPLOAD_PHOTO)
                    await bot.send_photo(chat_id=message.chat.id, photo=response, reply_to_message_id=message.message_id)
            except Exception as e:
                await bot_start(message)
                
async def translator_handler(message: types.Message):
    user_id = message.from_user.id
    if message.text == '–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ üîº':
        await dp.current_state(user=message.from_user.id).reset_state()
        await message.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞',reply_markup=markups.mainMenu)
    else:
        if message.text == '–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ üìö':
            pass
        elif message.text == '/start' or message.text == '/help' or message.text == '/balance' or message.text == '/manual':
            if message.text == '/start':
                await dp.current_state(user=message.from_user.id).reset_state()
                await bot_start(message)
            elif message.text == '/help':
                await bot_help(message)
            elif message.text == '/balance':
                await balance_getter(message)
            elif message.text == '/manual':
                await manual_getter(message)
        else:
            try:
                if (db.get_user_balance(user_id=user_id) == "0"):
                    await message.answer('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–ª–Ω–∏—Ç–µ –∏—Ö')
                else:
                    db.decrease_user_balance(user_id=user_id,amount=1)
                    await bot.send_chat_action(message.chat.id, "typing")
                    answer = await translator_mode.translate_mode(message.text)
                    await bot.send_chat_action(message.chat.id, aiogram.types.ChatActions.TYPING)
                    await bot.send_message(chat_id=message.chat.id, text=answer, reply_to_message_id=message.message_id)
            except Exception as e:
                    await bot_start(message)
                